*Which points have to be done to write a library:*
* TODO Checklist [0/8]
** TODO Brainstorming: 
*** TODO: What is the need for writing this library
*** TODO: What should the library be able to do (which functions should be included).
** TODO Folder and files organisation as e.g. with cookiecutter ([[http://cookiecutter.readthedocs.io/en/latest/index.html][cookiecutter documentation]]) [0/0]: 
*** TODO: install cookiecutter: 
#+BEGIN_QUOTE
- $ pip install --user cookiecutter \\
- $ conda install cookiecutter \\
- $ sudo apt-get install cookiecutter \\
#+END_QUOTE
*** TODO: chose and clone a cookiecutter template (e.g. pypackage) and generate a project:
- $ git clone git@github.com:audreyr/cookiecutter-pypackage.git
- $ cookiecutter cookiecutter-pypackage/
Or directly from the repository (gh: Github):
- $ cookiecutter gh:audreyr/cookiecutter-pypackage

Cookiecutter generates then a project corresponding to your entered values. Cookiecutter-pypackage generates a folder named after the project name, which includes several files, as e.g. 'AUTHORS.rst', 'LICENSE' or 'requirements_dev.txt' and the three folder 'project-name_test', 'docs' and 'tests', which again contain several files, which are requiered for the project.

** TODO Create a Git Repository
To have at the end an open source software and to have your work safed it is highly recommended to create a Git Repository.

** TODO Testing and code writing
*** TODO Install pytest:
- $ pip install -U pytest
*** TODO Write your tests ([[http://docs.pytest.org/en/latest/getting-started.html][Getting started with Pytest]])
- The test_file (tests/test_project_name_test.py) as well as the test function names need to start with 'test_'.
- import the code-file (project_name.py):
import project_name as project_name_shortcut
In case that the code file is not in the tests folder, but in another folder (e.g. 'project'), a link can be created as the following:
$ ln -s path/to/code_file/folder link/destination

The following folder structure can be used as an example: <br/>
\project 
#+BEGIN_CENTER
CodeFolder 
#+BEIG_CENTER
CodeFile.py 
#+END_CENTER
testsFolder 
#+BEGIN_CENTER
test_file.py 
CodeFolder (link) 
#+BEGIN_CENTER
CodeFile.py (link)
#+END_CENTER
#+END_CENTER
#+END_CENTER

Then, the code-file can be imported as the following: \\
import CodeFolder.CodeFile as shortcut

**** TODO write test functions: 
'assert' expected outcome to library generated outcome
The tests will first fail, because no code is available. Now a code file has to be written, adapted to the tests.
*** TODO Write your code: 
Adapted to the test_functions a code has to be written so that the tests can pass.

** TODO Documentation with sphinx [0/5]
*** TODO Install sphinx (different options):
- $ apt-get install python-sphinx
- $ pip install sphinx
- $ conda install -c anaconda sphinx
*** TODO Run sphinx:
$ sphinx-quickstart
-> A 'conf.py' file will be created, where the entry values can still be changed.
*** TODO Further documentation files:
For adding more files for the documentation, reStructuredText files (.rst) ([[http://docutils.sourceforge.net/docs/user/rst/quickref.html][reStructuredText Introduction]]) can be written, as for example 'installation.rst', and included in the index.rst file as the following:
Welcome to MyProject's documentation!
*************************************

Table of content
================

.. toctree::
   :maxdepth: 2
   :numbered:
	      
   introduction
   tutorial
   code
   installation

All reStructuredText files have to be in the same folder for this structure.

*** TODO Autogenerated Code documentation: If an autogenerated code documentation is desired, the following has to be done [0/3]:
**** TODO Docstrings in the code file, out of which the documentation can be build, has to be written.
**** TODO When running 'sphinx-quickstart', the 'autodoc: automatically insert docstrings from modules' has to be chosen.
**** TODO a code.rst file has to be written with the following input:
API
###

.. automodule:: Code_file
   :members: 
```
Whereby the name of the code file will be written without the suffix '.py'. 

*** TODO sphinx theme 'sphinx_rtd_theme' [0/3]:
For using the sphinx theme 'Read the Docs', the following has to be done:
**** TODO Change the html_theme in the conf.py file:
html_theme = "sphinx_rtd_theme"
**** TODO Install sphinx_rtd_theme:
$ pip install sphinx_rtd_theme
$ conda install -c anaconda sphinx_rtd_theme
**** TODO Build html files by running in the docs folder the following:
make html

** TODO Release your library on PyPI (Python Package Index) [0/5]:
Uploading your library on PyPI makes it directly public. In case you would first like to see how it looks like, you can use [TestPyPI](https://test.pypi.org/ "TestPyPI") instead of [PyPI](https://pypi.org/ "PyPI"). Either way, the following steps have to be done:
*** TODO Register on PyPI / TestPyPI
*** TODO If no setup.py file is available it has to be written. This file is an build script for setuptools.
*** TODO Install the latest version of wheel:
$ python3 -m pip install --user --upgrade setuptools wheel
*** TODO Build archives based on the setup.py file. This command should generate the dist folder, containing two files:
$ python3 setup.py sdist bdist_wheel
*** TODO install twine:
$ python3 -m pip install --user --upgrade twine
If this does not work, try the following:
$ python3.6 -m pip install --user --upgrade twine
$ conda install -c conda-forge twine
$ conda install -c pbrod twine
Make sure to have the newest version (twine 1.11.0 or higher) installed. 
Now twine can be run to upload the archives under dist ([[http://github.com/pypa/twine][Uploading by Twine]]).
For TestPyPI:
$ twine upload --repository-url https://test.pypi.org/legacy/ dist/*
For PyPI:
$ twine upload dist/*
Now your library should be able to be installed by running:
For TestPyPI
python3 -m pip install --index-url https://test.pypi.org/simple/ your_library
Or for PyPI:
pip install your_library
For more information the [[http://packaging.python.org/tutorials/packaging-projects/][Python Packaging User Guide]] is recommended.


** TODO Read the Docs [0/6]
To build a documentation website out of the documentation files, Read the Docs can be used.
*** TODO Register for Read the Docs ([Read the Docs-Sign up](https://readthedocs.org/accounts/signup/ "Sign up")) or sign in with Git.
*** TODO Import a Project: here you can import your Git Repository.
*** TODO Enter the required information and build your project.
*** TODO Go to 'Admin' within your project and then to Integration. Copy the URL.
*** TODO Go to Settings within your Git Repository. Then go to 'Webhooks' and click 'Add webhook'. Add the copied URL to 'Payload URL'. The further configuration can left unchanged. At the end click 'Add webhook'.
*** TODO Go back to your project on Read the Docs and try to build it again. This time it should pass. 
If it is not passing, click on the lastest version, which did not pass and try to solve the error. 
When it passed, you can click on 'View Docs' to see your documentation. 
The Git Repository should be connected to PyPI by the setup.py file and to Read the Docs by importing the Git Repository. Therefore, if you go to your project on PyPI, the documentation 'docs' should be passing now and able to see from the PyPI webpage. 


** TODO Travis CI [0/4]
With the continuous integration service Travis CI your GitHub project can be build and tested.
*** TODO sign in with GitHub (or create a new account)
*** TODO Add or enable a Repository you want to build
*** TODO Add, if not already available, a '.travis.yml' file, which can loook as the following:
# Config file for automatic testing at travis-ci.org

language: python
python:
  - 3.6

# command to install dependencies, e.g. pip install -r requirements.txt --use-mirrors
install:
  - "pip install -r requirements_dev.txt"

# command to run tests
script: cd tests && pytest && cd ..

*** TODO Add, commit and push this '.travis.yml' file to your Git Repository.
Thereby, and for every other pushed change, a Travis CI build should be triggered ([[http://docs.travis-ci.com/user/getting-started/][Gtting started with Travis CI]]).
